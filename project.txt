Hi ChatGPT, I'm providing you this file so you have more context for our current conversation. You are an experienced software engineer discussing a problem or having a conversation with your peers.

 For results longer than 490 words or more than 3900 characters, you will add a page number to each result and stop at theend of a whole line when you get close to hitting that count. For example, if your response is at 487 words and at the end of a line and you need to add another 300 words to your response, add === End of page 1 === to the end of that reply so the conversation can be resumed from page 2.

File tree:
zephyr/
    s.py
    types.js
    code.js
    README.md
    types.ts
    code.ts
    .gitignore
    package-lock.json
    package.json
    manifest.json
    tsconfig.json
    project.txt
    data/
        text.json

--------------------------------------------------------------------------------
# File: /Users/natebutler/Code/nate/zephyr/types.js | Lines: 1 | Bytes: 14
"use strict";

--------------------------------------------------------------------------------
# File: /Users/natebutler/Code/nate/zephyr/code.js | Lines: 43 | Bytes: 1810
"use strict";
// This plugin will open a window to prompt the user to enter a number, and
// it will then create that many rectangles on the screen.
// This file holds the main code for the plugins. It has access to the *document*.
// You can access browser APIs in the <script> tag inside "ui.html" which has a
// full browser environment (see documentation).
// This shows the HTML page in "ui.html".
figma.showUI(__html__);
function createWordFrame(word) {
    const frame = figma.createFrame();
    const textNode = figma.createText();
    textNode.characters = word;
    frame.appendChild(textNode);
    return frame;
}
// Calls to "parent.postMessage" from within the HTML page will trigger this
// callback. The callback will be passed the "pluginMessage" property of the
// posted message.
figma.ui.onmessage = msg => {
    if (msg.type === 'load-json') {
        const data = msg.data;
        const codeFrame = figma.createFrame();
        codeFrame.name = 'code';
        codeFrame.layoutMode = 'VERTICAL';
        for (const line of data.lines) {
            // Create a FrameNode for the line instead of a GroupNode
            const lineFrame = figma.createFrame();
            lineFrame.name = 'line';
            lineFrame.layoutMode = 'HORIZONTAL';
            for (const word of line.words) {
                const wordFrame = createWordFrame(word);
                lineFrame.appendChild(wordFrame);
            }
            codeFrame.appendChild(lineFrame);
        }
        figma.currentPage.appendChild(codeFrame);
        figma.viewport.scrollAndZoomIntoView([codeFrame]);
        // Make sure to close the plugin when you're done. Otherwise the plugin will
        // keep running, which shows the cancel button at the bottom of the screen.
        figma.closePlugin();
    }
    ;
};

--------------------------------------------------------------------------------
# File: /Users/natebutler/Code/nate/zephyr/README.md | Lines: 16 | Bytes: 766
# Zephyr â€“ A Figma Syntax Highlighting Plugin

Zephyr is designed for people that want highlighted code blocks in Figma for use in designing code editors, and other software engineering tools.

These tools have many states and feature that require being able to style individual text notes.

Zephyr was build out of frustration of the current state of plugins in this space and needing more control over the output.

## Roadmap

- [ ] Basic output: JSON -> structured text slice by node in figma
- [ ] Autolayout aware outputs
- [ ] Syntactic slicing using Tresitter for a single language (Rust) in a single theme
- [ ] Controling styling using [Tokens Studio](https://tokens.studio/)
- [ ] Add a list of selectable languages
- [ ] Add a list of selectable themes

--------------------------------------------------------------------------------
# File: /Users/natebutler/Code/nate/zephyr/types.ts | Lines: 32 | Bytes: 796
interface SyntaxColors {
    module: string;
    import_statement: string;
    name: string;
    dotted_name: string;
    identifier: string;
    function_definition: string;
    parameters: string;
    body: string;
    block: string;
    expression_statement: string;
    assignment: string;
    for_statement: string;
    pattern_list: string;
    call: string;
    attribute: string;
    arguments: string;
    argument_list: string;
    comment: string;
    if_statement: string;
    condition: string;
    consequence: string;
    comparison_operator: string;
    augmented_assignment: string;
    string: string;
    interpolation: string;
    escape_sequence: string;
    binary_operator: string;
    parenthesized_expression: string;
    integer: string;
    return_statement: string;
}

--------------------------------------------------------------------------------
# File: /Users/natebutler/Code/nate/zephyr/code.ts | Lines: 47 | Bytes: 1626
// This plugin will open a window to prompt the user to enter a number, and
// it will then create that many rectangles on the screen.

// This file holds the main code for the plugins. It has access to the *document*.
// You can access browser APIs in the <script> tag inside "ui.html" which has a
// full browser environment (see documentation).

function createWordFrame(word: string) {
  const frame = figma.createFrame();
  const textNode = figma.createText();
  textNode.characters = word;
  frame.appendChild(textNode);
  return frame;
}

// Calls to "parent.postMessage" from within the HTML page will trigger this
// callback. The callback will be passed the "pluginMessage" property of the
// posted message.
figma.ui.onmessage = (msg) => {
  if (msg.type === "load-json") {
    const data = msg.data;
    const codeFrame = figma.createFrame();
    codeFrame.name = "code";
    codeFrame.layoutMode = "VERTICAL";

    for (const line of data.lines) {
      // Create a FrameNode for the line instead of a GroupNode
      const lineFrame = figma.createFrame();
      lineFrame.name = "line";
      lineFrame.layoutMode = "HORIZONTAL";

      for (const word of line.words) {
        const wordFrame = createWordFrame(word);
        lineFrame.appendChild(wordFrame);
      }

      codeFrame.appendChild(lineFrame);
    }

    figma.currentPage.appendChild(codeFrame);
    figma.viewport.scrollAndZoomIntoView([codeFrame]);

    // Make sure to close the plugin when you're done. Otherwise the plugin will
    // keep running, which shows the cancel button at the bottom of the screen.
    figma.closePlugin();
  }
};

--------------------------------------------------------------------------------
# File: /Users/natebutler/Code/nate/zephyr/package.json | Lines: 16 | Bytes: 336
{
  "name": "zephyr-syntax-highlighter",
  "version": "1.0.0",
  "description": "Your Figma Plugin",
  "main": "code.js",
  "scripts": {
    "build": "tsc -p tsconfig.json",
    "watch": "npm run build -- --watch"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@figma/plugin-typings": "*",
    "typescript": "*"
  }
}
--------------------------------------------------------------------------------
# File: /Users/natebutler/Code/nate/zephyr/manifest.json | Lines: 9 | Bytes: 154
{
    "api": "1.0.0",
    "editorType": [
        "figma"
    ],
    "id": "zephyr-figma-code-highlighter",
    "name": "zephyr",
    "main": "code.js"
}

--------------------------------------------------------------------------------
# File: /Users/natebutler/Code/nate/zephyr/tsconfig.json | Lines: 11 | Bytes: 178
{
  "compilerOptions": {
    "target": "es6",
    "lib": ["es6"],
    "strict": true,
    "typeRoots": [
      "./node_modules/@types",
      "./node_modules/@figma"
    ]
  }
}

--------------------------------------------------------------------------------
# File: /Users/natebutler/Code/nate/zephyr/data/text.json | Lines: 77 | Bytes: 1721
{
    "lines": [
        {
            "words": [
                "Zephyr",
                "is",
                "designed",
                "for",
                "people",
                "that",
                "want",
                "highlighted",
                "code",
                "blocks",
                "in",
                "Figma",
                "for",
                "use",
                "in",
                "designing",
                "code",
                "editors,",
                "and",
                "other",
                "software",
                "engineering",
                "tools."
            ]
        },
        {
            "words": [
                "These",
                "tools",
                "have",
                "many",
                "states",
                "and",
                "feature",
                "that",
                "require",
                "being",
                "able",
                "to",
                "style",
                "individual",
                "text",
                "notes."
            ]
        },
        {
            "words": [
                "Zephyr",
                "was",
                "build",
                "out",
                "of",
                "frustration",
                "of",
                "the",
                "current",
                "state",
                "of",
                "plugins",
                "in",
                "this",
                "space",
                "and",
                "needing",
                "more",
                "control",
                "over",
                "the",
                "output."
            ]
        }
    ]
}

